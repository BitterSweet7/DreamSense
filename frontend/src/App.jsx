import { useState, useEffect } from 'react';
import { Moon, Sun, Languages, HelpCircle, Send, X, Menu } from 'lucide-react';

export default function App() {
  const [darkMode, setDarkMode] = useState(false);
  const [language, setLanguage] = useState('en');
  const [message, setMessage] = useState('');
  const [showDisclaimer, setShowDisclaimer] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  
  // Toggle dark mode and store preference
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    localStorage.setItem('darkMode', !darkMode);
  };

  // Toggle language between English and Thai
  const toggleLanguage = () => {
    const newLanguage = language === 'en' ? 'th' : 'en';
    setLanguage(newLanguage);
    localStorage.setItem('language', newLanguage);
  };

  // Load preferences from localStorage on component mount
  useEffect(() => {
    const savedDarkMode = localStorage.getItem('darkMode') === 'true';
    const savedLanguage = localStorage.getItem('language') || 'en';
    setDarkMode(savedDarkMode);
    setLanguage(savedLanguage);
  }, []);

  // Send a message
  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;
  
    const newMessages = [...messages, { role: 'user', content: message }];
    setMessages(newMessages);
    setIsLoading(true);
  
    try {
      const response = await fetch('http://localhost:5000/api/analyze', {   // <<== URL ไปยัง backend API
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          prompt: message, 
          language: language 
        }),
      });
  
      const data = await response.json();
  
      setMessages([
        ...newMessages,
        { role: 'assistant', content: data.answer }  // <<== ใช้คำตอบจาก backend
      ]);
    } catch (error) {
      console.error('Error contacting backend:', error);
      setMessages([
        ...newMessages,
        { role: 'assistant', content: 'An error occurred. Please try again later.' }
      ]);
    } finally {
      setIsLoading(false);
      setMessage('');
    }
  };
  
  // Translations
  const translations = {
    en: {
      placeholder: "Describe your dream here...",
      send: "Send",
      disclaimer: "**Disclaimer:** DreamSense provides dream interpretations generated by AI for informational and entertainment purposes only. Interpretations should not be considered as medical, psychological, or professional advice. Always trust your own feelings and consult a professional if needed.",
      welcome: "Welcome to DreamSense AI",
      intro: "Share your dream, and I'll help you understand its meaning",
      analyzing: "Analyzing your dream..."
    },
    th: {
      placeholder: "อธิบายความฝันของคุณที่นี่...",
      send: "ส่ง",
      disclaimer: "**ข้อจำกัดความรับผิดชอบ:** DreamSense เป็นบริการวิเคราะห์ความฝันที่สร้างขึ้นโดย AI เพื่อวัตถุประสงค์ในการให้ข้อมูลและความบันเทิงเท่านั้น การตีความไม่ควรนำไปใช้แทนคำแนะนำทางการแพทย์ จิตวิทยา หรือคำแนะนำจากผู้เชี่ยวชาญ โปรดใช้วิจารณญาณและขอคำปรึกษาจากผู้เชี่ยวชาญหากจำเป็น",
      welcome: "ยินดีต้อนรับสู่ DreamSense AI",
      intro: "แบ่งปันความฝันของคุณ และเราจะช่วยคุณเข้าใจความหมายของมัน",
      analyzing: "กำลังวิเคราะห์ความฝันของคุณ..."
    }
  };

  return (
    <div className={`flex flex-col h-screen overflow-hidden ${darkMode ? 'bg-slate-900 text-gray-100' : 'bg-sky-50 text-gray-800'}`}>
      {/* Main background image */}
      <div 
        className="fixed inset-0 w-full h-full bg-cover bg-center z-0" 
        style={{ 
          backgroundImage: `url(${darkMode ? '/public/background-dreamsdark.jpg' : '/public/background-dreamslight.jpg'})`,
          opacity: 0.5
        }}
      ></div>

      {/* Navbar */}
      <nav className={`relative z-10 px-4 py-5 flex justify-between items-center shadow-md ${darkMode ? 'bg-slate-950 bg-opacity-60' : 'bg-white bg-opacity-50'}`}>
        {/* Logo - Changed to switch between logos based on darkMode */}
        <div className="flex items-center">
          <img 
            src={darkMode ? "/public/DreamSense1.png" : "/public/DreamSense2.png"} 
            alt="DreamSense Logo" 
            className="h-8 md:h-8" // Adjusted height to fit properly
          />
        </div>
        
        {/* Mobile menu button */}
        <button 
          className="md:hidden p-2 rounded-md"
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        >
          <Menu className={darkMode ? 'text-gray-200' : 'text-gray-700'} size={24} />
        </button>
        
        {/* Desktop Nav links */}
        <div className="hidden md:flex items-center space-x-4">
          <button 
            onClick={toggleDarkMode}
            className={`p-2 rounded-full transition-colors ${darkMode ? 'bg-slate-700 text-white hover:bg-slate-600' : 'bg-sky-100 text-blue-800 hover:bg-sky-200'}`}
            aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
          >
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </button>
          
          {/* Fixed language button to have icon and text in horizontal alignment */}
          <button 
            onClick={toggleLanguage}
            className={`p-2 rounded-full transition-colors flex items-center ${darkMode ? 'bg-slate-700 text-white hover:bg-slate-600' : 'bg-sky-100 text-blue-800 hover:bg-sky-200'}`}
            aria-label={language === 'en' ? 'Switch to Thai language' : 'Switch to English language'}
          >
            <Languages size={20} />
            <span className="ml-1 text-sm font-medium">{language === 'en' ? 'TH' : 'EN'}</span>
          </button>
          
          <button 
            onClick={() => setShowDisclaimer(true)}
            className={`p-2 rounded-full transition-colors ${darkMode ? 'bg-slate-700 text-white hover:bg-slate-600' : 'bg-sky-100 text-blue-800 hover:bg-sky-200'}`}
            aria-label="Show disclaimer"
          >
            <HelpCircle size={20} />
          </button>
        </div>
      </nav>
      
      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <div className={`md:hidden absolute top-16 right-0 z-20 w-48 py-2 shadow-lg rounded-bl-lg ${darkMode ? 'bg-slate-800 bg-opacity-95' : 'bg-white bg-opacity-95'}`}>
          <button 
            onClick={toggleDarkMode}
            className={`flex items-center w-full px-4 py-2 ${darkMode ? 'hover:bg-slate-700' : 'hover:bg-sky-50'}`}
          >
            {darkMode ? <Sun size={18} className="mr-2 text-white" /> : <Moon size={18} className="mr-2 text-blue-800" />}
            {darkMode ? 'Light Mode' : 'Dark Mode'}
          </button>
          
          <button 
            onClick={toggleLanguage}
            className={`flex items-center w-full px-4 py-2 ${darkMode ? 'hover:bg-slate-700' : 'hover:bg-sky-50'}`}
          >
            <Languages size={18} className="mr-2" />
            {language === 'en' ? 'ภาษาไทย' : 'English'}
          </button>
          
          <button 
            onClick={() => {
              setShowDisclaimer(true);
              setIsMobileMenuOpen(false);
            }}
            className={`flex items-center w-full px-4 py-2 ${darkMode ? 'hover:bg-slate-700' : 'hover:bg-sky-50'}`}
          >
            <HelpCircle size={18} className="mr-2" />
            Disclaimer
          </button>
        </div>
      )}
      
      {/* Main app structure - Modified to create a fixed layout */}
      <div className="flex flex-col flex-1 relative z-10 overflow-hidden">
        {/* Chat container - Made scrollable */}
        <div className="flex-1 overflow-y-auto">
          <div className="max-w-4xl mx-auto w-full p-4 space-y-4">
            {messages.length === 0 ? (
              <div className={`text-center py-12 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                <div className="flex justify-center mb-6">
                  <div className={`p-6 rounded-full ${darkMode ? 'bg-blue-900 bg-opacity-50' : 'bg-blue-100 bg-opacity-70'}`}>
                    <Moon size={48} className={darkMode ? 'text-white' : 'text-blue-800'} />
                  </div>
                </div>
                <h2 className="text-2xl font-bold mb-3">{translations[language].welcome}</h2>
                <p className="text-lg">{translations[language].intro}</p>
              </div>
            ) : (
              messages.map((msg, index) => (
                <div 
                  key={index} 
                  className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-3/4 rounded-2xl px-4 py-3 ${
                      msg.role === 'user' 
                        ? darkMode 
                          ? 'bg-blue-800 text-white' 
                          : 'bg-blue-600 text-white' 
                        : darkMode 
                          ? 'bg-slate-800 text-gray-200 border border-slate-700' 
                          : 'bg-white text-gray-800 shadow-md'
                    }`}
                  >
                    {msg.content.split('\n').map((line, idx) => (
                        line.trim() !== '' ? (
                          <p key={idx} className="mb-2 leading-relaxed whitespace-pre-wrap">
                            {line}
                          </p>
                        ) : (
                          <br key={idx} />
                        )
                      ))}


                  </div>
                </div>
              ))
            )}
            
            {/* Loading indicator with animated clouds */}
            {isLoading && (
              <div className="flex justify-start">
                <div className={`max-w-3/4 rounded-2xl px-4 py-3 ${
                  darkMode 
                    ? 'bg-slate-800 text-gray-200 border border-slate-700' 
                    : 'bg-white text-gray-800 shadow-md'
                }`}>
                  <div className="flex items-center">
                    <span>{translations[language].analyzing}</span>
                    <div className="ml-3 relative h-8 w-24">
                      {/* Animated clouds container */}
                      <div className="clouds-container absolute inset-0">
                        <div className="cloud cloud-1"></div>
                        <div className="cloud cloud-2"></div>
                        <div className="cloud cloud-3"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Message input - Made transparent background */}
        <div className="sticky bottom-0 p-4 z-10">
          <div className="max-w-4xl mx-auto">
            <form onSubmit={handleSendMessage} className="relative">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder={translations[language].placeholder}
                className={`w-full p-4 pr-12 rounded-full border shadow-sm backdrop-blur-sm ${
                  darkMode 
                    ? 'bg-slate-800 bg-opacity-50 border-slate-700 text-white placeholder-gray-400' 
                    : 'bg-white bg-opacity-60 border-gray-300 text-gray-800 placeholder-gray-500'
                } focus:outline-none focus:ring-2 ${darkMode ? 'focus:ring-blue-500' : 'focus:ring-blue-400'}`}
              />
              <button 
                type="submit"
                className={`absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-colors ${
                  message.trim() 
                    ? darkMode 
                      ? 'bg-yellow-500 text-gray-900 hover:bg-yellow-400' 
                      : 'bg-blue-600 text-white hover:bg-blue-500' 
                    : darkMode 
                      ? 'bg-slate-700 text-gray-500 cursor-not-allowed' 
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                }`}
                disabled={!message.trim()}
                aria-label="Send message"
              >
                <Send size={20} />
              </button>
            </form>
          </div>
        </div>
      </div>
      
      {/* Disclaimer modal */}
      {showDisclaimer && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className={`relative max-w-md w-full rounded-lg p-6 ${darkMode ? 'bg-slate-800' : 'bg-white'} shadow-xl`}>
            <button 
              onClick={() => setShowDisclaimer(false)}
              className={`absolute top-2 right-2 p-1 rounded-full hover:bg-opacity-10 ${darkMode ? 'hover:bg-gray-200' : 'hover:bg-gray-800'}`}
              aria-label="Close disclaimer"
            >
              <X size={24} />
            </button>
            <h3 className="text-xl font-bold mb-4">{language === 'en' ? 'Disclaimer' : 'ข้อจำกัดความรับผิดชอบ'}</h3>
            <p className="whitespace-pre-line">{translations[language].disclaimer}</p>
          </div>
        </div>
      )}
      
      {/* Cloud animations and other styles */}
      <style jsx>{`
        @keyframes twinkle {
          0% { opacity: 0.1; }
          100% { opacity: 0.7; }
        }
        
        @keyframes twinkleBright {
          0% { opacity: 0.4; transform: scale(0.8); }
          100% { opacity: 1; transform: scale(1.2); }
        }
        
        @keyframes shootingStar {
          0% { 
            transform: translate(0, 0) rotate(45deg) scale(1); 
            opacity: 0;
          }
          2% { 
            transform: translate(20px, 20px) rotate(45deg) scale(1);
            opacity: 1;
          }
          4% { 
            transform: translate(40px, 40px) rotate(45deg) scale(1);
            opacity: 0;
            box-shadow: 0 0 0 transparent;
          }
          100% { 
            transform: translate(40px, 40px) rotate(45deg) scale(1);
            opacity: 0;
          }
        }
        
        /* Cloud container and individual clouds */
        .clouds-container {
          position: relative;
          overflow: hidden;
        }
        
        .cloud {
          position: absolute;
          background-color: ${darkMode ? 'rgba(255, 255, 255, 0.8)' : 'rgba(255, 255, 255, 0.9)'};
          border-radius: 10px;
        }
        
        .cloud-1 {
          width: 8px;
          height: 6px;
          top: 3px;
          left: 0px;
          animation: cloudFloat1 2s infinite alternate ease-in-out;
        }
        
        .cloud-2 {
          width: 12px;
          height: 8px;
          top: 1px;
          left: 10px;
          animation: cloudFloat2 1.8s infinite alternate ease-in-out;
          animation-delay: 0.2s;
        }
        
        .cloud-3 {
          width: 10px;
          height: 7px;
          top: 4px;
          left: 24px;
          animation: cloudFloat3 2.2s infinite alternate ease-in-out;
          animation-delay: 0.4s;
        }
        
        @keyframes cloudFloat1 {
          0% { transform: translateX(0) translateY(0); opacity: 0.5; }
          50% { transform: translateX(3px) translateY(-2px); opacity: 1; }
          100% { transform: translateX(6px) translateY(0); opacity: 0.5; }
        }
        
        @keyframes cloudFloat2 {
          0% { transform: translateX(0) translateY(0); opacity: 0.6; }
          50% { transform: translateX(5px) translateY(-3px); opacity: 1; }
          100% { transform: translateX(10px) translateY(0); opacity: 0.6; }
        }
        
        @keyframes cloudFloat3 {
          0% { transform: translateX(0) translateY(0); opacity: 0.4; }
          50% { transform: translateX(4px) translateY(-2px); opacity: 0.9; }
          100% { transform: translateX(8px) translateY(0); opacity: 0.4; }
        }
        
        .cloud-float-1 {
          animation: cloudFloat1 30s infinite alternate ease-in-out;
        }
        
        .cloud-float-2 {
          animation: cloudFloat2 24s infinite alternate ease-in-out;
        }
        
        .cloud-float-3 {
          animation: cloudFloat3 34s infinite alternate ease-in-out;
        }
      `}</style>
    </div>
  );
}