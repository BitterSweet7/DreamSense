import { useState, useEffect } from 'react';
import { Moon, Sun, Languages, HelpCircle, Send, X, Menu } from 'lucide-react';

export default function App() {
  const [darkMode, setDarkMode] = useState(false);
  const [language, setLanguage] = useState('en');
  const [message, setMessage] = useState('');
  const [showDisclaimer, setShowDisclaimer] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  
  // Toggle dark mode and store preference
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    localStorage.setItem('darkMode', !darkMode);
  };

  // Toggle language between English and Thai
  const toggleLanguage = () => {
    const newLanguage = language === 'en' ? 'th' : 'en';
    setLanguage(newLanguage);
    localStorage.setItem('language', newLanguage);
  };

  // Load preferences from localStorage on component mount
  useEffect(() => {
    const savedDarkMode = localStorage.getItem('darkMode') === 'true';
    const savedLanguage = localStorage.getItem('language') || 'en';
    setDarkMode(savedDarkMode);
    setLanguage(savedLanguage);
  }, []);

  // Send a message
  const handleSendMessage = (e) => {
    e.preventDefault();
    if (!message.trim()) return;
    
    const newMessages = [
      ...messages,
      { role: 'user', content: message }
    ];
    
    setMessages(newMessages);
    
    // Simulate AI response (in real app, this would call your API)
    setTimeout(() => {
      const response = language === 'en' 
        ? "I'm analyzing your dream... This dream might suggest that your subconscious is processing some unresolved emotions. The symbols in your dream indicate a journey of self-discovery."
        : "กำลังวิเคราะห์ความฝันของคุณ... ความฝันนี้อาจบ่งบอกถึงจิตใต้สำนึกที่กำลังประมวลผลอารมณ์ที่ยังไม่ได้รับการแก้ไข สัญลักษณ์ในความฝันของคุณบ่งชี้ถึงการเดินทางค้นพบตัวเอง";
      
      setMessages([
        ...newMessages,
        { role: 'assistant', content: response }
      ]);
    }, 1000);
    
    setMessage('');
  };

  // Translations
  const translations = {
    en: {
      placeholder: "Describe your dream here...",
      send: "Send",
      disclaimer: "**Disclaimer:** DreamSense provides dream interpretations generated by AI for informational and entertainment purposes only. Interpretations should not be considered as medical, psychological, or professional advice. Always trust your own feelings and consult a professional if needed.",
      welcome: "Welcome to DreamSense AI",
      intro: "Share your dream, and I'll help you understand its meaning"
    },
    th: {
      placeholder: "อธิบายความฝันของคุณที่นี่...",
      send: "ส่ง",
      disclaimer: "**ข้อจำกัดความรับผิดชอบ:** DreamSense เป็นบริการวิเคราะห์ความฝันที่สร้างขึ้นโดย AI เพื่อวัตถุประสงค์ในการให้ข้อมูลและความบันเทิงเท่านั้น การตีความไม่ควรนำไปใช้แทนคำแนะนำทางการแพทย์ จิตวิทยา หรือคำแนะนำจากผู้เชี่ยวชาญ โปรดใช้วิจารณญาณและขอคำปรึกษาจากผู้เชี่ยวชาญหากจำเป็น",
      welcome: "ยินดีต้อนรับสู่ DreamSense AI",
      intro: "แบ่งปันความฝันของคุณ และเราจะช่วยคุณเข้าใจความหมายของมัน"
    }
  };

  return (
    <div className={`flex flex-col h-screen overflow-hidden ${darkMode ? 'bg-slate-900 text-gray-100' : 'bg-sky-50 text-gray-800'}`}>
      {/* Enhanced Background elements */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none z-0">
        {/* Gradient background */}
        <div className={`absolute inset-0 ${darkMode ? 'bg-gradient-to-br from-slate-900 via-blue-950 to-indigo-950' : 'bg-gradient-to-br from-blue-50 via-sky-50 to-indigo-100'}`}></div>
        
        {/* Enhanced Stars with various sizes and animations */}
        {darkMode && (
          <>
            {/* Small stars */}
            {Array(50).fill().map((_, i) => (
              <div
                key={`small-star-${i}`}
                className="absolute bg-white rounded-full"
                style={{
                  width: Math.random() * 2 + 1 + 'px',
                  height: Math.random() * 2 + 1 + 'px',
                  top: Math.random() * 100 + '%',
                  left: Math.random() * 100 + '%',
                  opacity: Math.random() * 0.7 + 0.3,
                  animation: `twinkle ${Math.random() * 3 + 2}s infinite alternate`
                }}
              />
            ))}
            
            {/* Medium stars */}
            {Array(20).fill().map((_, i) => (
              <div
                key={`medium-star-${i}`}
                className="absolute bg-white rounded-full"
                style={{
                  width: Math.random() * 3 + 2 + 'px',
                  height: Math.random() * 3 + 2 + 'px',
                  top: Math.random() * 100 + '%',
                  left: Math.random() * 100 + '%',
                  opacity: Math.random() * 0.7 + 0.3,
                  animation: `twinkle ${Math.random() * 4 + 3}s infinite alternate`
                }}
              />
            ))}
            
            {/* Large stars with glow */}
            {Array(10).fill().map((_, i) => (
              <div
                key={`large-star-${i}`}
                className="absolute rounded-full"
                style={{
                  width: Math.random() * 4 + 3 + 'px',
                  height: Math.random() * 4 + 3 + 'px',
                  top: Math.random() * 100 + '%',
                  left: Math.random() * 100 + '%',
                  background: 'white',
                  boxShadow: '0 0 4px 2px rgba(255, 255, 255, 0.7)',
                  opacity: Math.random() * 0.7 + 0.3,
                  animation: `twinkleBright ${Math.random() * 5 + 4}s infinite alternate`
                }}
              />
            ))}
            
            {/* Shooting stars */}
            {Array(3).fill().map((_, i) => (
              <div
                key={`shooting-star-${i}`}
                className="absolute bg-white"
                style={{
                  width: '2px',
                  height: '2px',
                  top: `${Math.random() * 50}%`,
                  left: `${Math.random() * 100}%`,
                  boxShadow: '0 0 10px 2px white',
                  opacity: 0,
                  animation: `shootingStar ${Math.random() * 10 + 10}s ${Math.random() * 5}s infinite linear`
                }}
              />
            ))}
            
            {/* Constellation lines */}
            <svg className="absolute inset-0 w-full h-full opacity-10">
              <line x1="10%" y1="20%" x2="15%" y2="25%" stroke="white" strokeWidth="1" />
              <line x1="15%" y1="25%" x2="20%" y2="15%" stroke="white" strokeWidth="1" />
              <line x1="20%" y1="15%" x2="10%" y2="20%" stroke="white" strokeWidth="1" />
              
              <line x1="70%" y1="30%" x2="75%" y2="35%" stroke="white" strokeWidth="1" />
              <line x1="75%" y1="35%" x2="80%" y2="30%" stroke="white" strokeWidth="1" />
              <line x1="80%" y1="30%" x2="85%" y2="40%" stroke="white" strokeWidth="1" />
              <line x1="85%" y1="40%" x2="70%" y2="30%" stroke="white" strokeWidth="1" />
            </svg>
          </>
        )}
        
        {/* Enhanced Clouds */}
        <div className="clouds-container absolute inset-0">
          {/* Main clouds - larger, more defined */}
          <div className={`absolute top-20 left-20 w-64 h-24 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-80 cloud-float-1`}></div>
          <div className={`absolute top-16 left-32 w-80 h-32 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-70 cloud-float-2`}></div>
          <div className={`absolute top-28 left-16 w-72 h-28 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-60 cloud-float-3`}></div>
          
          {/* Right side clouds */}
          <div className={`absolute top-40 right-10 w-96 h-24 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-70 cloud-float-2`}></div>
          <div className={`absolute top-36 right-24 w-64 h-32 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-80 cloud-float-3`}></div>
          <div className={`absolute top-48 right-16 w-80 h-28 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-60 cloud-float-1`}></div>
          
          {/* Bottom clouds */}
          <div className={`absolute bottom-20 left-1/4 w-64 h-24 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-50 cloud-float-3`}></div>
          <div className={`absolute bottom-16 right-1/4 w-80 h-32 rounded-full ${darkMode ? 'bg-slate-800' : 'bg-white'} opacity-40 cloud-float-1`}></div>
          
          {/* Decorative cloud details */}
          <div className={`absolute top-24 left-40 w-16 h-16 rounded-full ${darkMode ? 'bg-slate-700' : 'bg-gray-100'} opacity-90 cloud-float-2`}></div>
          <div className={`absolute top-44 right-40 w-16 h-16 rounded-full ${darkMode ? 'bg-slate-700' : 'bg-gray-100'} opacity-90 cloud-float-1`}></div>
        </div>
        
        {/* Celestial objects (moon/sun based on mode) */}
        <div className={`absolute ${darkMode ? 'top-12 right-12' : 'top-16 left-16'} transition-all duration-1000`}>
          {darkMode ? (
            <div className="w-20 h-20 rounded-full bg-yellow-200 opacity-20 shadow-lg shadow-yellow-100"></div>
          ) : (
            <div className="w-24 h-24 rounded-full bg-yellow-300 opacity-20 shadow-lg shadow-yellow-200"></div>
          )}
        </div>
      </div>

      {/* Navbar */}
      <nav className={`relative z-10 px-4 py-2 flex justify-between items-center shadow-md ${darkMode ? 'bg-slate-800 bg-opacity-90' : 'bg-white bg-opacity-90'}`}>
        {/* Logo - Changed to switch between logos based on darkMode */}
        <div className="flex items-center">
          <img 
            src={darkMode ? "/public/DreamSense1.png" : "/public/DreamSense2.png"} 
            alt="DreamSense Logo" 
            className="h-8 md:h-10" // Adjusted height to fit properly
          />
        </div>
        
        {/* Mobile menu button */}
        <button 
          className="md:hidden p-2 rounded-md"
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        >
          <Menu className={darkMode ? 'text-gray-200' : 'text-gray-700'} size={24} />
        </button>
        
        {/* Desktop Nav links */}
        <div className="hidden md:flex items-center space-x-4">
          <button 
            onClick={toggleDarkMode}
            className={`p-2 rounded-full transition-colors ${darkMode ? 'bg-slate-700 text-yellow-300 hover:bg-slate-600' : 'bg-sky-100 text-blue-800 hover:bg-sky-200'}`}
            aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
          >
            {darkMode ? <Sun size={20} /> : <Moon size={20} />}
          </button>
          
          {/* Fixed language button to have icon and text in horizontal alignment */}
          <button 
            onClick={toggleLanguage}
            className={`p-2 rounded-full transition-colors flex items-center ${darkMode ? 'bg-slate-700 text-yellow-300 hover:bg-slate-600' : 'bg-sky-100 text-blue-800 hover:bg-sky-200'}`}
            aria-label={language === 'en' ? 'Switch to Thai language' : 'Switch to English language'}
          >
            <Languages size={20} />
            <span className="ml-1 text-sm font-medium">{language === 'en' ? 'TH' : 'EN'}</span>
          </button>
          
          <button 
            onClick={() => setShowDisclaimer(true)}
            className={`p-2 rounded-full transition-colors ${darkMode ? 'bg-slate-700 text-yellow-300 hover:bg-slate-600' : 'bg-sky-100 text-blue-800 hover:bg-sky-200'}`}
            aria-label="Show disclaimer"
          >
            <HelpCircle size={20} />
          </button>
        </div>
      </nav>
      
      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <div className={`md:hidden absolute top-16 right-0 z-20 w-48 py-2 shadow-lg rounded-bl-lg ${darkMode ? 'bg-slate-800 bg-opacity-95' : 'bg-white bg-opacity-95'}`}>
          <button 
            onClick={toggleDarkMode}
            className={`flex items-center w-full px-4 py-2 ${darkMode ? 'hover:bg-slate-700' : 'hover:bg-sky-50'}`}
          >
            {darkMode ? <Sun size={18} className="mr-2 text-yellow-300" /> : <Moon size={18} className="mr-2 text-blue-800" />}
            {darkMode ? 'Light Mode' : 'Dark Mode'}
          </button>
          
          <button 
            onClick={toggleLanguage}
            className={`flex items-center w-full px-4 py-2 ${darkMode ? 'hover:bg-slate-700' : 'hover:bg-sky-50'}`}
          >
            <Languages size={18} className="mr-2" />
            {language === 'en' ? 'ภาษาไทย' : 'English'}
          </button>
          
          <button 
            onClick={() => {
              setShowDisclaimer(true);
              setIsMobileMenuOpen(false);
            }}
            className={`flex items-center w-full px-4 py-2 ${darkMode ? 'hover:bg-slate-700' : 'hover:bg-sky-50'}`}
          >
            <HelpCircle size={18} className="mr-2" />
            Disclaimer
          </button>
        </div>
      )}
      
      {/* Main app structure - Modified to create a fixed layout */}
      <div className="flex flex-col flex-1 relative z-10 overflow-hidden">
        {/* Chat container - Made scrollable */}
        <div className="flex-1 overflow-y-auto">
          <div className="max-w-4xl mx-auto w-full p-4 space-y-4">
            {messages.length === 0 ? (
              <div className={`text-center py-12 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                <div className="flex justify-center mb-6">
                  <div className={`p-6 rounded-full ${darkMode ? 'bg-blue-900 bg-opacity-50' : 'bg-blue-100'}`}>
                    <Moon size={48} className={darkMode ? 'text-yellow-300' : 'text-blue-800'} />
                  </div>
                </div>
                <h2 className="text-2xl font-bold mb-3">{translations[language].welcome}</h2>
                <p className="text-lg">{translations[language].intro}</p>
              </div>
            ) : (
              messages.map((msg, index) => (
                <div 
                  key={index} 
                  className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-3/4 rounded-2xl px-4 py-3 ${
                      msg.role === 'user' 
                        ? darkMode 
                          ? 'bg-blue-800 text-white' 
                          : 'bg-blue-600 text-white' 
                        : darkMode 
                          ? 'bg-slate-800 text-gray-200 border border-slate-700' 
                          : 'bg-white text-gray-800 shadow-md'
                    }`}
                  >
                    {msg.content}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
        
        {/* Message input - Made sticky at bottom */}
        <div className={`sticky bottom-0 border-t ${darkMode ? 'bg-slate-900 border-slate-800' : 'bg-sky-50 border-gray-200'} p-4`}>
          <div className="max-w-4xl mx-auto">
            <form onSubmit={handleSendMessage} className="relative">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder={translations[language].placeholder}
                className={`w-full p-4 pr-12 rounded-full border shadow-sm ${
                  darkMode 
                    ? 'bg-slate-800 border-slate-700 text-white placeholder-gray-400' 
                    : 'bg-white border-gray-300 text-gray-800 placeholder-gray-500'
                } focus:outline-none focus:ring-2 ${darkMode ? 'focus:ring-blue-500' : 'focus:ring-blue-400'}`}
              />
              <button 
                type="submit"
                className={`absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-colors ${
                  message.trim() 
                    ? darkMode 
                      ? 'bg-yellow-500 text-gray-900 hover:bg-yellow-400' 
                      : 'bg-blue-600 text-white hover:bg-blue-500' 
                    : darkMode 
                      ? 'bg-slate-700 text-gray-500 cursor-not-allowed' 
                      : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                }`}
                disabled={!message.trim()}
                aria-label="Send message"
              >
                <Send size={20} />
              </button>
            </form>
          </div>
        </div>
      </div>
      
      {/* Disclaimer modal */}
      {showDisclaimer && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className={`relative max-w-md w-full rounded-lg p-6 ${darkMode ? 'bg-slate-800' : 'bg-white'} shadow-xl`}>
            <button 
              onClick={() => setShowDisclaimer(false)}
              className={`absolute top-2 right-2 p-1 rounded-full hover:bg-opacity-10 ${darkMode ? 'hover:bg-gray-200' : 'hover:bg-gray-800'}`}
              aria-label="Close disclaimer"
            >
              <X size={24} />
            </button>
            <h3 className="text-xl font-bold mb-4">{language === 'en' ? 'Disclaimer' : 'ข้อจำกัดความรับผิดชอบ'}</h3>
            <p className="whitespace-pre-line">{translations[language].disclaimer}</p>
          </div>
        </div>
      )}
      
      {/* CSS for animations */}
      <style jsx>{`
        @keyframes twinkle {
          0% { opacity: 0.1; }
          100% { opacity: 0.7; }
        }
        
        @keyframes twinkleBright {
          0% { opacity: 0.4; transform: scale(0.8); }
          100% { opacity: 1; transform: scale(1.2); }
        }
        
        @keyframes shootingStar {
          0% { 
            transform: translate(0, 0) rotate(45deg) scale(1); 
            opacity: 0;
          }
          2% { 
            transform: translate(20px, 20px) rotate(45deg) scale(1);
            opacity: 1;
          }
          4% { 
            transform: translate(40px, 40px) rotate(45deg) scale(1);
            opacity: 0;
            box-shadow: 0 0 0 transparent;
          }
          100% { 
            transform: translate(40px, 40px) rotate(45deg) scale(1);
            opacity: 0;
          }
        }
        
        .cloud-float-1 {
          animation: cloudFloat1 30s infinite alternate ease-in-out;
        }
        
        .cloud-float-2 {
          animation: cloudFloat2 24s infinite alternate ease-in-out;
        }
        
        .cloud-float-3 {
          animation: cloudFloat3 34s infinite alternate ease-in-out;
        }
        
        @keyframes cloudFloat1 {
          0% { transform: translateX(0) translateY(0); }
          50% { transform: translateX(30px) translateY(10px); }
          100% { transform: translateX(-10px) translateY(-5px); }
        }
        
        @keyframes cloudFloat2 {
          0% { transform: translateX(0) translateY(0); }
          50% { transform: translateX(-20px) translateY(15px); }
          100% { transform: translateX(15px) translateY(-10px); }
        }
        
        @keyframes cloudFloat3 {
          0% { transform: translateX(0) translateY(0); }
          30% { transform: translateX(15px) translateY(-8px); }
          70% { transform: translateX(-25px) translateY(12px); }
          100% { transform: translateX(5px) translateY(-5px); }
        }
      `}</style>
    </div>
  );
}